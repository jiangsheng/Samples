#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>
#using <System.Data.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 
namespace AutoCompleteDemo {
    using namespace System;
    
    using namespace System;
    ref class Northwind;
    
    
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"Northwind"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class Northwind : public System::Data::DataSet {
        public : ref class OrdersDataTable;
        public : ref class OrdersRow;
        public : ref class OrdersRowChangeEvent;
        
        private: AutoCompleteDemo::Northwind::OrdersDataTable^  tableOrders;
        
        private: System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void OrdersRowChangeEventHandler(System::Object^  sender, AutoCompleteDemo::Northwind::OrdersRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        Northwind();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        Northwind(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(System::ComponentModel::DesignerSerializationVisibility::Content)]
        property AutoCompleteDemo::Northwind::OrdersDataTable^  Orders {
            AutoCompleteDemo::Northwind::OrdersDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property System::Data::SchemaSerializationMode SchemaSerializationMode {
            System::Data::SchemaSerializationMode get() override;
            System::Void set(System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property System::Data::DataTableCollection^  Tables {
            System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property System::Data::DataRelationCollection^  Relations {
            System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Void ReadXmlSerializable(System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitVars(System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Boolean ShouldSerializeOrders();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void SchemaChanged(System::Object^  sender, System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class OrdersDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn^  columnOrderID;
            
            private: System::Data::DataColumn^  columnCustomerID;
            
            private: System::Data::DataColumn^  columnEmployeeID;
            
            private: System::Data::DataColumn^  columnOrderDate;
            
            private: System::Data::DataColumn^  columnRequiredDate;
            
            private: System::Data::DataColumn^  columnShippedDate;
            
            private: System::Data::DataColumn^  columnShipVia;
            
            private: System::Data::DataColumn^  columnFreight;
            
            private: System::Data::DataColumn^  columnShipName;
            
            private: System::Data::DataColumn^  columnShipAddress;
            
            private: System::Data::DataColumn^  columnShipCity;
            
            private: System::Data::DataColumn^  columnShipRegion;
            
            private: System::Data::DataColumn^  columnShipPostalCode;
            
            private: System::Data::DataColumn^  columnShipCountry;
            
            public: event AutoCompleteDemo::Northwind::OrdersRowChangeEventHandler^  OrdersRowChanging;
            
            public: event AutoCompleteDemo::Northwind::OrdersRowChangeEventHandler^  OrdersRowChanged;
            
            public: event AutoCompleteDemo::Northwind::OrdersRowChangeEventHandler^  OrdersRowDeleting;
            
            public: event AutoCompleteDemo::Northwind::OrdersRowChangeEventHandler^  OrdersRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            OrdersDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            OrdersDataTable(System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            OrdersDataTable(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  OrderIDColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  CustomerIDColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  EmployeeIDColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  OrderDateColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  RequiredDateColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  ShippedDateColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  ShipViaColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  FreightColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  ShipNameColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  ShipAddressColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  ShipCityColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  ShipRegionColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  ShipPostalCodeColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataColumn^  ShipCountryColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property System::Int32 Count {
                System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property AutoCompleteDemo::Northwind::OrdersRow^  default [System::Int32 ] {
                AutoCompleteDemo::Northwind::OrdersRow^  get(System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void AddOrdersRow(AutoCompleteDemo::Northwind::OrdersRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            AutoCompleteDemo::Northwind::OrdersRow^  AddOrdersRow(
                        System::String^  CustomerID, 
                        System::Int32 EmployeeID, 
                        System::DateTime OrderDate, 
                        System::DateTime RequiredDate, 
                        System::DateTime ShippedDate, 
                        System::Int32 ShipVia, 
                        System::Decimal Freight, 
                        System::String^  ShipName, 
                        System::String^  ShipAddress, 
                        System::String^  ShipCity, 
                        System::String^  ShipRegion, 
                        System::String^  ShipPostalCode, 
                        System::String^  ShipCountry);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            AutoCompleteDemo::Northwind::OrdersRow^  FindByOrderID(System::Int32 OrderID);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            AutoCompleteDemo::Northwind::OrdersRow^  NewOrdersRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataRow^  NewRowFromBuilder(System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void RemoveOrdersRow(AutoCompleteDemo::Northwind::OrdersRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class OrdersRow : public System::Data::DataRow {
            
            private: AutoCompleteDemo::Northwind::OrdersDataTable^  tableOrders;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            OrdersRow(System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 OrderID {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CustomerID {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 EmployeeID {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime OrderDate {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime RequiredDate {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime ShippedDate {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 ShipVia {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal Freight {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ShipName {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ShipAddress {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ShipCity {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ShipRegion {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ShipPostalCode {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ShipCountry {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsCustomerIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetCustomerIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsEmployeeIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetEmployeeIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsOrderDateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetOrderDateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsRequiredDateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetRequiredDateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsShippedDateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetShippedDateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsShipViaNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetShipViaNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsFreightNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetFreightNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsShipNameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetShipNameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsShipAddressNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetShipAddressNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsShipCityNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetShipCityNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsShipRegionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetShipRegionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsShipPostalCodeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetShipPostalCodeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsShipCountryNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetShipCountryNull();
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class OrdersRowChangeEvent : public System::EventArgs {
            
            private: AutoCompleteDemo::Northwind::OrdersRow^  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            OrdersRowChangeEvent(AutoCompleteDemo::Northwind::OrdersRow^  row, System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property AutoCompleteDemo::Northwind::OrdersRow^  Row {
                AutoCompleteDemo::Northwind::OrdersRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Data::DataRowAction Action {
                System::Data::DataRowAction get();
            }
        };
    };
}
namespace AutoCompleteDemo {
    
    
    inline Northwind::Northwind() {
        this->BeginInit();
        this->InitClass();
        System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew System::ComponentModel::CollectionChangeEventHandler(this, &AutoCompleteDemo::Northwind::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline Northwind::Northwind(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context) : 
            System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew System::ComponentModel::CollectionChangeEventHandler(this, &AutoCompleteDemo::Northwind::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        System::String^  strSchema = (cli::safe_cast<System::String^  >(info->GetValue(L"XmlSchema", System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == System::Data::SchemaSerializationMode::IncludeSchema) {
            System::Data::DataSet^  ds = (gcnew System::Data::DataSet());
            ds->ReadXmlSchema((gcnew System::Xml::XmlTextReader((gcnew System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"Orders"] != nullptr) {
                __super::Tables->Add((gcnew AutoCompleteDemo::Northwind::OrdersDataTable(ds->Tables[L"Orders"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew System::Xml::XmlTextReader((gcnew System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew System::ComponentModel::CollectionChangeEventHandler(this, &AutoCompleteDemo::Northwind::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline AutoCompleteDemo::Northwind::OrdersDataTable^  Northwind::Orders::get() {
        return this->tableOrders;
    }
    
    inline System::Data::SchemaSerializationMode Northwind::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void Northwind::SchemaSerializationMode::set(System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline System::Data::DataTableCollection^  Northwind::Tables::get() {
        return __super::Tables;
    }
    
    inline System::Data::DataRelationCollection^  Northwind::Relations::get() {
        return __super::Relations;
    }
    
    inline System::Void Northwind::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline System::Data::DataSet^  Northwind::Clone() {
        AutoCompleteDemo::Northwind^  cln = (cli::safe_cast<AutoCompleteDemo::Northwind^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline System::Boolean Northwind::ShouldSerializeTables() {
        return false;
    }
    
    inline System::Boolean Northwind::ShouldSerializeRelations() {
        return false;
    }
    
    inline System::Void Northwind::ReadXmlSerializable(System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            System::Data::DataSet^  ds = (gcnew System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"Orders"] != nullptr) {
                __super::Tables->Add((gcnew AutoCompleteDemo::Northwind::OrdersDataTable(ds->Tables[L"Orders"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline System::Xml::Schema::XmlSchema^  Northwind::GetSchemaSerializable() {
        System::IO::MemoryStream^  stream = (gcnew System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return System::Xml::Schema::XmlSchema::Read((gcnew System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline System::Void Northwind::InitVars() {
        this->InitVars(true);
    }
    
    inline System::Void Northwind::InitVars(System::Boolean initTable) {
        this->tableOrders = (cli::safe_cast<AutoCompleteDemo::Northwind::OrdersDataTable^  >(__super::Tables[L"Orders"]));
        if (initTable == true) {
            if (this->tableOrders != nullptr) {
                this->tableOrders->InitVars();
            }
        }
    }
    
    inline System::Void Northwind::InitClass() {
        this->DataSetName = L"Northwind";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/Northwind.xsd";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableOrders = (gcnew AutoCompleteDemo::Northwind::OrdersDataTable());
        __super::Tables->Add(this->tableOrders);
    }
    
    inline System::Boolean Northwind::ShouldSerializeOrders() {
        return false;
    }
    
    inline System::Void Northwind::SchemaChanged(System::Object^  sender, System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline System::Xml::Schema::XmlSchemaComplexType^  Northwind::GetTypedDataSetSchema(System::Xml::Schema::XmlSchemaSet^  xs) {
        AutoCompleteDemo::Northwind^  ds = (gcnew AutoCompleteDemo::Northwind());
        System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew System::Xml::Schema::XmlSchemaComplexType());
        System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew System::Xml::Schema::XmlSchemaSequence());
        xs->Add(ds->GetSchemaSerializable());
        System::Xml::Schema::XmlSchemaAny^  any = (gcnew System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        return type;
    }
    
    
    inline Northwind::OrdersDataTable::OrdersDataTable() {
        this->TableName = L"Orders";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline Northwind::OrdersDataTable::OrdersDataTable(System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline Northwind::OrdersDataTable::OrdersDataTable(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context) : 
            System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::OrderIDColumn::get() {
        return this->columnOrderID;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::CustomerIDColumn::get() {
        return this->columnCustomerID;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::EmployeeIDColumn::get() {
        return this->columnEmployeeID;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::OrderDateColumn::get() {
        return this->columnOrderDate;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::RequiredDateColumn::get() {
        return this->columnRequiredDate;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::ShippedDateColumn::get() {
        return this->columnShippedDate;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::ShipViaColumn::get() {
        return this->columnShipVia;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::FreightColumn::get() {
        return this->columnFreight;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::ShipNameColumn::get() {
        return this->columnShipName;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::ShipAddressColumn::get() {
        return this->columnShipAddress;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::ShipCityColumn::get() {
        return this->columnShipCity;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::ShipRegionColumn::get() {
        return this->columnShipRegion;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::ShipPostalCodeColumn::get() {
        return this->columnShipPostalCode;
    }
    
    inline System::Data::DataColumn^  Northwind::OrdersDataTable::ShipCountryColumn::get() {
        return this->columnShipCountry;
    }
    
    inline System::Int32 Northwind::OrdersDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline AutoCompleteDemo::Northwind::OrdersRow^  Northwind::OrdersDataTable::default::get(System::Int32 index) {
        return (cli::safe_cast<AutoCompleteDemo::Northwind::OrdersRow^  >(this->Rows[index]));
    }
    
    inline System::Void Northwind::OrdersDataTable::AddOrdersRow(AutoCompleteDemo::Northwind::OrdersRow^  row) {
        this->Rows->Add(row);
    }
    
    inline AutoCompleteDemo::Northwind::OrdersRow^  Northwind::OrdersDataTable::AddOrdersRow(
                System::String^  CustomerID, 
                System::Int32 EmployeeID, 
                System::DateTime OrderDate, 
                System::DateTime RequiredDate, 
                System::DateTime ShippedDate, 
                System::Int32 ShipVia, 
                System::Decimal Freight, 
                System::String^  ShipName, 
                System::String^  ShipAddress, 
                System::String^  ShipCity, 
                System::String^  ShipRegion, 
                System::String^  ShipPostalCode, 
                System::String^  ShipCountry) {
        AutoCompleteDemo::Northwind::OrdersRow^  rowOrdersRow = (cli::safe_cast<AutoCompleteDemo::Northwind::OrdersRow^  >(this->NewRow()));
        rowOrdersRow->ItemArray = gcnew cli::array< System::Object^  >(14) {nullptr, CustomerID, EmployeeID, OrderDate, RequiredDate, 
            ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry};
        this->Rows->Add(rowOrdersRow);
        return rowOrdersRow;
    }
    
    inline AutoCompleteDemo::Northwind::OrdersRow^  Northwind::OrdersDataTable::FindByOrderID(System::Int32 OrderID) {
        return (cli::safe_cast<AutoCompleteDemo::Northwind::OrdersRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {OrderID})));
    }
    
    inline System::Collections::IEnumerator^  Northwind::OrdersDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline System::Data::DataTable^  Northwind::OrdersDataTable::Clone() {
        AutoCompleteDemo::Northwind::OrdersDataTable^  cln = (cli::safe_cast<AutoCompleteDemo::Northwind::OrdersDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline System::Data::DataTable^  Northwind::OrdersDataTable::CreateInstance() {
        return (gcnew AutoCompleteDemo::Northwind::OrdersDataTable());
    }
    
    inline System::Void Northwind::OrdersDataTable::InitVars() {
        this->columnOrderID = __super::Columns[L"OrderID"];
        this->columnCustomerID = __super::Columns[L"CustomerID"];
        this->columnEmployeeID = __super::Columns[L"EmployeeID"];
        this->columnOrderDate = __super::Columns[L"OrderDate"];
        this->columnRequiredDate = __super::Columns[L"RequiredDate"];
        this->columnShippedDate = __super::Columns[L"ShippedDate"];
        this->columnShipVia = __super::Columns[L"ShipVia"];
        this->columnFreight = __super::Columns[L"Freight"];
        this->columnShipName = __super::Columns[L"ShipName"];
        this->columnShipAddress = __super::Columns[L"ShipAddress"];
        this->columnShipCity = __super::Columns[L"ShipCity"];
        this->columnShipRegion = __super::Columns[L"ShipRegion"];
        this->columnShipPostalCode = __super::Columns[L"ShipPostalCode"];
        this->columnShipCountry = __super::Columns[L"ShipCountry"];
    }
    
    inline System::Void Northwind::OrdersDataTable::InitClass() {
        this->columnOrderID = (gcnew System::Data::DataColumn(L"OrderID", System::Int32::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnOrderID);
        this->columnCustomerID = (gcnew System::Data::DataColumn(L"CustomerID", System::String::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnCustomerID);
        this->columnEmployeeID = (gcnew System::Data::DataColumn(L"EmployeeID", System::Int32::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnEmployeeID);
        this->columnOrderDate = (gcnew System::Data::DataColumn(L"OrderDate", System::DateTime::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnOrderDate);
        this->columnRequiredDate = (gcnew System::Data::DataColumn(L"RequiredDate", System::DateTime::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnRequiredDate);
        this->columnShippedDate = (gcnew System::Data::DataColumn(L"ShippedDate", System::DateTime::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnShippedDate);
        this->columnShipVia = (gcnew System::Data::DataColumn(L"ShipVia", System::Int32::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnShipVia);
        this->columnFreight = (gcnew System::Data::DataColumn(L"Freight", System::Decimal::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFreight);
        this->columnShipName = (gcnew System::Data::DataColumn(L"ShipName", System::String::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnShipName);
        this->columnShipAddress = (gcnew System::Data::DataColumn(L"ShipAddress", System::String::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnShipAddress);
        this->columnShipCity = (gcnew System::Data::DataColumn(L"ShipCity", System::String::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnShipCity);
        this->columnShipRegion = (gcnew System::Data::DataColumn(L"ShipRegion", System::String::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnShipRegion);
        this->columnShipPostalCode = (gcnew System::Data::DataColumn(L"ShipPostalCode", System::String::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnShipPostalCode);
        this->columnShipCountry = (gcnew System::Data::DataColumn(L"ShipCountry", System::String::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnShipCountry);
        this->Constraints->Add((gcnew System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< System::Data::DataColumn^  >(1) {this->columnOrderID}, 
                true)));
        this->columnOrderID->AutoIncrement = true;
        this->columnOrderID->AllowDBNull = false;
        this->columnOrderID->Unique = true;
        this->columnCustomerID->MaxLength = 5;
        this->columnShipName->MaxLength = 40;
        this->columnShipAddress->MaxLength = 60;
        this->columnShipCity->MaxLength = 15;
        this->columnShipRegion->MaxLength = 15;
        this->columnShipPostalCode->MaxLength = 10;
        this->columnShipCountry->MaxLength = 15;
    }
    
    inline AutoCompleteDemo::Northwind::OrdersRow^  Northwind::OrdersDataTable::NewOrdersRow() {
        return (cli::safe_cast<AutoCompleteDemo::Northwind::OrdersRow^  >(this->NewRow()));
    }
    
    inline System::Data::DataRow^  Northwind::OrdersDataTable::NewRowFromBuilder(System::Data::DataRowBuilder^  builder) {
        return (gcnew AutoCompleteDemo::Northwind::OrdersRow(builder));
    }
    
    inline System::Type^  Northwind::OrdersDataTable::GetRowType() {
        return AutoCompleteDemo::Northwind::OrdersRow::typeid;
    }
    
    inline System::Void Northwind::OrdersDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->OrdersRowChanged(this, (gcnew AutoCompleteDemo::Northwind::OrdersRowChangeEvent((cli::safe_cast<AutoCompleteDemo::Northwind::OrdersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void Northwind::OrdersDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->OrdersRowChanging(this, (gcnew AutoCompleteDemo::Northwind::OrdersRowChangeEvent((cli::safe_cast<AutoCompleteDemo::Northwind::OrdersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void Northwind::OrdersDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->OrdersRowDeleted(this, (gcnew AutoCompleteDemo::Northwind::OrdersRowChangeEvent((cli::safe_cast<AutoCompleteDemo::Northwind::OrdersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void Northwind::OrdersDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->OrdersRowDeleting(this, (gcnew AutoCompleteDemo::Northwind::OrdersRowChangeEvent((cli::safe_cast<AutoCompleteDemo::Northwind::OrdersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void Northwind::OrdersDataTable::RemoveOrdersRow(AutoCompleteDemo::Northwind::OrdersRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline System::Xml::Schema::XmlSchemaComplexType^  Northwind::OrdersDataTable::GetTypedTableSchema(System::Xml::Schema::XmlSchemaSet^  xs) {
        System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew System::Xml::Schema::XmlSchemaComplexType());
        System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew System::Xml::Schema::XmlSchemaSequence());
        AutoCompleteDemo::Northwind^  ds = (gcnew AutoCompleteDemo::Northwind());
        xs->Add(ds->GetSchemaSerializable());
        System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = System::Decimal(0);
        any1->MaxOccurs = System::Decimal::MaxValue;
        any1->ProcessContents = System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = System::Decimal(1);
        any2->ProcessContents = System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"OrdersDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        return type;
    }
    
    
    inline Northwind::OrdersRow::OrdersRow(System::Data::DataRowBuilder^  rb) : 
            System::Data::DataRow(rb) {
        this->tableOrders = (cli::safe_cast<AutoCompleteDemo::Northwind::OrdersDataTable^  >(this->Table));
    }
    
    inline System::Int32 Northwind::OrdersRow::OrderID::get() {
        return (*cli::safe_cast<System::Int32^>(this[this->tableOrders->OrderIDColumn]));
    }
    inline System::Void Northwind::OrdersRow::OrderID::set(System::Int32 value) {
        this[this->tableOrders->OrderIDColumn] = value;
    }
    
    inline System::String^  Northwind::OrdersRow::CustomerID::get() {
        if (this->IsCustomerIDNull()) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<System::String^  >(this[this->tableOrders->CustomerIDColumn]));
        }
    }
    inline System::Void Northwind::OrdersRow::CustomerID::set(System::String^  value) {
        this[this->tableOrders->CustomerIDColumn] = value;
    }
    
    inline System::Int32 Northwind::OrdersRow::EmployeeID::get() {
        try {
            return (*cli::safe_cast<System::Int32^>(this[this->tableOrders->EmployeeIDColumn]));
        }
        catch (System::InvalidCastException^ e) {
            throw (gcnew System::Data::StrongTypingException(L"The value for column \'EmployeeID\' in table \'Orders\' is DBNull.", 
                e));
        }
    }
    inline System::Void Northwind::OrdersRow::EmployeeID::set(System::Int32 value) {
        this[this->tableOrders->EmployeeIDColumn] = value;
    }
    
    inline System::DateTime Northwind::OrdersRow::OrderDate::get() {
        try {
            return (*cli::safe_cast<System::DateTime^>(this[this->tableOrders->OrderDateColumn]));
        }
        catch (System::InvalidCastException^ e) {
            throw (gcnew System::Data::StrongTypingException(L"The value for column \'OrderDate\' in table \'Orders\' is DBNull.", 
                e));
        }
    }
    inline System::Void Northwind::OrdersRow::OrderDate::set(System::DateTime value) {
        this[this->tableOrders->OrderDateColumn] = value;
    }
    
    inline System::DateTime Northwind::OrdersRow::RequiredDate::get() {
        try {
            return (*cli::safe_cast<System::DateTime^>(this[this->tableOrders->RequiredDateColumn]));
        }
        catch (System::InvalidCastException^ e) {
            throw (gcnew System::Data::StrongTypingException(L"The value for column \'RequiredDate\' in table \'Orders\' is DBNull.", 
                e));
        }
    }
    inline System::Void Northwind::OrdersRow::RequiredDate::set(System::DateTime value) {
        this[this->tableOrders->RequiredDateColumn] = value;
    }
    
    inline System::DateTime Northwind::OrdersRow::ShippedDate::get() {
        try {
            return (*cli::safe_cast<System::DateTime^>(this[this->tableOrders->ShippedDateColumn]));
        }
        catch (System::InvalidCastException^ e) {
            throw (gcnew System::Data::StrongTypingException(L"The value for column \'ShippedDate\' in table \'Orders\' is DBNull.", 
                e));
        }
    }
    inline System::Void Northwind::OrdersRow::ShippedDate::set(System::DateTime value) {
        this[this->tableOrders->ShippedDateColumn] = value;
    }
    
    inline System::Int32 Northwind::OrdersRow::ShipVia::get() {
        try {
            return (*cli::safe_cast<System::Int32^>(this[this->tableOrders->ShipViaColumn]));
        }
        catch (System::InvalidCastException^ e) {
            throw (gcnew System::Data::StrongTypingException(L"The value for column \'ShipVia\' in table \'Orders\' is DBNull.", 
                e));
        }
    }
    inline System::Void Northwind::OrdersRow::ShipVia::set(System::Int32 value) {
        this[this->tableOrders->ShipViaColumn] = value;
    }
    
    inline System::Decimal Northwind::OrdersRow::Freight::get() {
        try {
            return (*cli::safe_cast<System::Decimal^>(this[this->tableOrders->FreightColumn]));
        }
        catch (System::InvalidCastException^ e) {
            throw (gcnew System::Data::StrongTypingException(L"The value for column \'Freight\' in table \'Orders\' is DBNull.", 
                e));
        }
    }
    inline System::Void Northwind::OrdersRow::Freight::set(System::Decimal value) {
        this[this->tableOrders->FreightColumn] = value;
    }
    
    inline System::String^  Northwind::OrdersRow::ShipName::get() {
        if (this->IsShipNameNull()) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<System::String^  >(this[this->tableOrders->ShipNameColumn]));
        }
    }
    inline System::Void Northwind::OrdersRow::ShipName::set(System::String^  value) {
        this[this->tableOrders->ShipNameColumn] = value;
    }
    
    inline System::String^  Northwind::OrdersRow::ShipAddress::get() {
        if (this->IsShipAddressNull()) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<System::String^  >(this[this->tableOrders->ShipAddressColumn]));
        }
    }
    inline System::Void Northwind::OrdersRow::ShipAddress::set(System::String^  value) {
        this[this->tableOrders->ShipAddressColumn] = value;
    }
    
    inline System::String^  Northwind::OrdersRow::ShipCity::get() {
        if (this->IsShipCityNull()) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<System::String^  >(this[this->tableOrders->ShipCityColumn]));
        }
    }
    inline System::Void Northwind::OrdersRow::ShipCity::set(System::String^  value) {
        this[this->tableOrders->ShipCityColumn] = value;
    }
    
    inline System::String^  Northwind::OrdersRow::ShipRegion::get() {
        if (this->IsShipRegionNull()) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<System::String^  >(this[this->tableOrders->ShipRegionColumn]));
        }
    }
    inline System::Void Northwind::OrdersRow::ShipRegion::set(System::String^  value) {
        this[this->tableOrders->ShipRegionColumn] = value;
    }
    
    inline System::String^  Northwind::OrdersRow::ShipPostalCode::get() {
        if (this->IsShipPostalCodeNull()) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<System::String^  >(this[this->tableOrders->ShipPostalCodeColumn]));
        }
    }
    inline System::Void Northwind::OrdersRow::ShipPostalCode::set(System::String^  value) {
        this[this->tableOrders->ShipPostalCodeColumn] = value;
    }
    
    inline System::String^  Northwind::OrdersRow::ShipCountry::get() {
        if (this->IsShipCountryNull()) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<System::String^  >(this[this->tableOrders->ShipCountryColumn]));
        }
    }
    inline System::Void Northwind::OrdersRow::ShipCountry::set(System::String^  value) {
        this[this->tableOrders->ShipCountryColumn] = value;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsCustomerIDNull() {
        return this->IsNull(this->tableOrders->CustomerIDColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetCustomerIDNull() {
        this[this->tableOrders->CustomerIDColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsEmployeeIDNull() {
        return this->IsNull(this->tableOrders->EmployeeIDColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetEmployeeIDNull() {
        this[this->tableOrders->EmployeeIDColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsOrderDateNull() {
        return this->IsNull(this->tableOrders->OrderDateColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetOrderDateNull() {
        this[this->tableOrders->OrderDateColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsRequiredDateNull() {
        return this->IsNull(this->tableOrders->RequiredDateColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetRequiredDateNull() {
        this[this->tableOrders->RequiredDateColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsShippedDateNull() {
        return this->IsNull(this->tableOrders->ShippedDateColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetShippedDateNull() {
        this[this->tableOrders->ShippedDateColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsShipViaNull() {
        return this->IsNull(this->tableOrders->ShipViaColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetShipViaNull() {
        this[this->tableOrders->ShipViaColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsFreightNull() {
        return this->IsNull(this->tableOrders->FreightColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetFreightNull() {
        this[this->tableOrders->FreightColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsShipNameNull() {
        return this->IsNull(this->tableOrders->ShipNameColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetShipNameNull() {
        this[this->tableOrders->ShipNameColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsShipAddressNull() {
        return this->IsNull(this->tableOrders->ShipAddressColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetShipAddressNull() {
        this[this->tableOrders->ShipAddressColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsShipCityNull() {
        return this->IsNull(this->tableOrders->ShipCityColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetShipCityNull() {
        this[this->tableOrders->ShipCityColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsShipRegionNull() {
        return this->IsNull(this->tableOrders->ShipRegionColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetShipRegionNull() {
        this[this->tableOrders->ShipRegionColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsShipPostalCodeNull() {
        return this->IsNull(this->tableOrders->ShipPostalCodeColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetShipPostalCodeNull() {
        this[this->tableOrders->ShipPostalCodeColumn] = System::Convert::DBNull;
    }
    
    inline System::Boolean Northwind::OrdersRow::IsShipCountryNull() {
        return this->IsNull(this->tableOrders->ShipCountryColumn);
    }
    
    inline System::Void Northwind::OrdersRow::SetShipCountryNull() {
        this[this->tableOrders->ShipCountryColumn] = System::Convert::DBNull;
    }
    
    
    inline Northwind::OrdersRowChangeEvent::OrdersRowChangeEvent(AutoCompleteDemo::Northwind::OrdersRow^  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline AutoCompleteDemo::Northwind::OrdersRow^  Northwind::OrdersRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction Northwind::OrdersRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
namespace AutoCompleteDemo {
    namespace NorthwindTableAdapters {
    
    using namespace System;
    ref class OrdersTableAdapter;
    
    
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::ComponentModel::DataObjectAttribute(true), 
    System::ComponentModel::DesignerAttribute(L"Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" 
L", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
    public ref class OrdersTableAdapter : public System::ComponentModel::Component {
        
        private: System::Data::OleDb::OleDbDataAdapter^  _adapter;
        
        private: System::Data::OleDb::OleDbConnection^  _connection;
        
        private: cli::array< System::Data::OleDb::OleDbCommand^  >^  _commandCollection;
        
        private: System::Boolean _clearBeforeFill;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        OrdersTableAdapter();
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Data::OleDb::OleDbDataAdapter^  Adapter {
            System::Data::OleDb::OleDbDataAdapter^  get();
        }
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Data::OleDb::OleDbConnection^  Connection {
            System::Data::OleDb::OleDbConnection^  get();
            System::Void set(System::Data::OleDb::OleDbConnection^  value);
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property cli::array< System::Data::OleDb::OleDbCommand^  >^  CommandCollection {
            cli::array< System::Data::OleDb::OleDbCommand^  >^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Boolean ClearBeforeFill {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitAdapter();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitConnection();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitCommandCollection();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Fill, true)]
        virtual System::Int32 Fill(AutoCompleteDemo::Northwind::OrdersDataTable^  dataTable);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Select, true)]
        virtual AutoCompleteDemo::Northwind::OrdersDataTable^  GetData();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Fill, false)]
        virtual System::Int32 FillByFilter(AutoCompleteDemo::Northwind::OrdersDataTable^  dataTable, System::String^  Param1);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Select, false)]
        virtual AutoCompleteDemo::Northwind::OrdersDataTable^  GetDataByFilter(System::String^  Param1);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(AutoCompleteDemo::Northwind::OrdersDataTable^  dataTable);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(AutoCompleteDemo::Northwind^  dataSet);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(System::Data::DataRow^  dataRow);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(cli::array< System::Data::DataRow^  >^  dataRows);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Delete, true)]
        virtual System::Int32 Delete(
                    System::Int32 Original_OrderID, 
                    System::String^  Original_CustomerID, 
                    System::Nullable<System::Int32 > Original_EmployeeID, 
                    System::Nullable<System::DateTime > Original_OrderDate, 
                    System::Nullable<System::DateTime > Original_RequiredDate, 
                    System::Nullable<System::DateTime > Original_ShippedDate, 
                    System::Nullable<System::Int32 > Original_ShipVia, 
                    System::Nullable<System::Decimal > Original_Freight, 
                    System::String^  Original_ShipName, 
                    System::String^  Original_ShipAddress, 
                    System::String^  Original_ShipCity, 
                    System::String^  Original_ShipRegion, 
                    System::String^  Original_ShipPostalCode, 
                    System::String^  Original_ShipCountry);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Insert, true)]
        virtual System::Int32 Insert(
                    System::String^  CustomerID, 
                    System::Nullable<System::Int32 > EmployeeID, 
                    System::Nullable<System::DateTime > OrderDate, 
                    System::Nullable<System::DateTime > RequiredDate, 
                    System::Nullable<System::DateTime > ShippedDate, 
                    System::Nullable<System::Int32 > ShipVia, 
                    System::Nullable<System::Decimal > Freight, 
                    System::String^  ShipName, 
                    System::String^  ShipAddress, 
                    System::String^  ShipCity, 
                    System::String^  ShipRegion, 
                    System::String^  ShipPostalCode, 
                    System::String^  ShipCountry);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Update, true)]
        virtual System::Int32 Update(
                    System::String^  CustomerID, 
                    System::Nullable<System::Int32 > EmployeeID, 
                    System::Nullable<System::DateTime > OrderDate, 
                    System::Nullable<System::DateTime > RequiredDate, 
                    System::Nullable<System::DateTime > ShippedDate, 
                    System::Nullable<System::Int32 > ShipVia, 
                    System::Nullable<System::Decimal > Freight, 
                    System::String^  ShipName, 
                    System::String^  ShipAddress, 
                    System::String^  ShipCity, 
                    System::String^  ShipRegion, 
                    System::String^  ShipPostalCode, 
                    System::String^  ShipCountry, 
                    System::Int32 Original_OrderID, 
                    System::String^  Original_CustomerID, 
                    System::Nullable<System::Int32 > Original_EmployeeID, 
                    System::Nullable<System::DateTime > Original_OrderDate, 
                    System::Nullable<System::DateTime > Original_RequiredDate, 
                    System::Nullable<System::DateTime > Original_ShippedDate, 
                    System::Nullable<System::Int32 > Original_ShipVia, 
                    System::Nullable<System::Decimal > Original_Freight, 
                    System::String^  Original_ShipName, 
                    System::String^  Original_ShipAddress, 
                    System::String^  Original_ShipCity, 
                    System::String^  Original_ShipRegion, 
                    System::String^  Original_ShipPostalCode, 
                    System::String^  Original_ShipCountry);
    };
    }
}
namespace AutoCompleteDemo {
    namespace NorthwindTableAdapters {
    
    
    inline OrdersTableAdapter::OrdersTableAdapter() {
        this->ClearBeforeFill = true;
    }
    
    inline System::Data::OleDb::OleDbDataAdapter^  OrdersTableAdapter::Adapter::get() {
        if (this->_adapter == nullptr) {
            this->InitAdapter();
        }
        return this->_adapter;
    }
    
    inline System::Data::OleDb::OleDbConnection^  OrdersTableAdapter::Connection::get() {
        if (this->_connection == nullptr) {
            this->InitConnection();
        }
        return this->_connection;
    }
    inline System::Void OrdersTableAdapter::Connection::set(System::Data::OleDb::OleDbConnection^  value) {
        this->_connection = __identifier(value);
        if (this->Adapter->InsertCommand != nullptr) {
            this->Adapter->InsertCommand->Connection = __identifier(value);
        }
        if (this->Adapter->DeleteCommand != nullptr) {
            this->Adapter->DeleteCommand->Connection = __identifier(value);
        }
        if (this->Adapter->UpdateCommand != nullptr) {
            this->Adapter->UpdateCommand->Connection = __identifier(value);
        }
        for (        System::Int32 i = 0; (i < this->CommandCollection->Length);         i = (i + 1)) {
            if (this->CommandCollection[i] != nullptr) {
                (cli::safe_cast<System::Data::OleDb::OleDbCommand^  >(this->CommandCollection[i]))->Connection = __identifier(value);
            }
        }
    }
    
    inline cli::array< System::Data::OleDb::OleDbCommand^  >^  OrdersTableAdapter::CommandCollection::get() {
        if (this->_commandCollection == nullptr) {
            this->InitCommandCollection();
        }
        return this->_commandCollection;
    }
    
    inline System::Boolean OrdersTableAdapter::ClearBeforeFill::get() {
        return this->_clearBeforeFill;
    }
    inline System::Void OrdersTableAdapter::ClearBeforeFill::set(System::Boolean value) {
        this->_clearBeforeFill = __identifier(value);
    }
    
    inline System::Void OrdersTableAdapter::InitAdapter() {
        this->_adapter = (gcnew System::Data::OleDb::OleDbDataAdapter());
        System::Data::Common::DataTableMapping^  tableMapping = (gcnew System::Data::Common::DataTableMapping());
        tableMapping->SourceTable = L"Table";
        tableMapping->DataSetTable = L"Orders";
        tableMapping->ColumnMappings->Add(L"OrderID", L"OrderID");
        tableMapping->ColumnMappings->Add(L"CustomerID", L"CustomerID");
        tableMapping->ColumnMappings->Add(L"EmployeeID", L"EmployeeID");
        tableMapping->ColumnMappings->Add(L"OrderDate", L"OrderDate");
        tableMapping->ColumnMappings->Add(L"RequiredDate", L"RequiredDate");
        tableMapping->ColumnMappings->Add(L"ShippedDate", L"ShippedDate");
        tableMapping->ColumnMappings->Add(L"ShipVia", L"ShipVia");
        tableMapping->ColumnMappings->Add(L"Freight", L"Freight");
        tableMapping->ColumnMappings->Add(L"ShipName", L"ShipName");
        tableMapping->ColumnMappings->Add(L"ShipAddress", L"ShipAddress");
        tableMapping->ColumnMappings->Add(L"ShipCity", L"ShipCity");
        tableMapping->ColumnMappings->Add(L"ShipRegion", L"ShipRegion");
        tableMapping->ColumnMappings->Add(L"ShipPostalCode", L"ShipPostalCode");
        tableMapping->ColumnMappings->Add(L"ShipCountry", L"ShipCountry");
        this->_adapter->TableMappings->Add(tableMapping);
        this->_adapter->DeleteCommand = (gcnew System::Data::OleDb::OleDbCommand());
        this->_adapter->DeleteCommand->Connection = this->Connection;
        this->_adapter->DeleteCommand->CommandText = L"DELETE FROM `Orders` WHERE ((`OrderID` = \?) AND ((\? = 1 AND `CustomerID` IS NULL)" 
L" OR (`CustomerID` = \?)) AND ((\? = 1 AND `EmployeeID` IS NULL) OR (`EmployeeID` =" 
L" \?)) AND ((\? = 1 AND `OrderDate` IS NULL) OR (`OrderDate` = \?)) AND ((\? = 1 AND " 
L"`RequiredDate` IS NULL) OR (`RequiredDate` = \?)) AND ((\? = 1 AND `ShippedDate` I" 
L"S NULL) OR (`ShippedDate` = \?)) AND ((\? = 1 AND `ShipVia` IS NULL) OR (`ShipVia`" 
L" = \?)) AND ((\? = 1 AND `Freight` IS NULL) OR (`Freight` = \?)) AND ((\? = 1 AND `S" 
L"hipName` IS NULL) OR (`ShipName` = \?)) AND ((\? = 1 AND `ShipAddress` IS NULL) OR" 
L" (`ShipAddress` = \?)) AND ((\? = 1 AND `ShipCity` IS NULL) OR (`ShipCity` = \?)) A" 
L"ND ((\? = 1 AND `ShipRegion` IS NULL) OR (`ShipRegion` = \?)) AND ((\? = 1 AND `Shi" 
L"pPostalCode` IS NULL) OR (`ShipPostalCode` = \?)) AND ((\? = 1 AND `ShipCountry` I" 
L"S NULL) OR (`ShipCountry` = \?)))";
        this->_adapter->DeleteCommand->CommandType = System::Data::CommandType::Text;
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_OrderID", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"OrderID", System::Data::DataRowVersion::Original, 
                false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_CustomerID", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"CustomerID", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_CustomerID", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"CustomerID", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_EmployeeID", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"EmployeeID", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_EmployeeID", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"EmployeeID", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_OrderDate", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"OrderDate", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_OrderDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"OrderDate", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_RequiredDate", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"RequiredDate", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_RequiredDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"RequiredDate", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShippedDate", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShippedDate", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShippedDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShippedDate", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipVia", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipVia", System::Data::DataRowVersion::Original, 
                true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipVia", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipVia", System::Data::DataRowVersion::Original, 
                false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_Freight", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"Freight", System::Data::DataRowVersion::Original, 
                true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_Freight", System::Data::OleDb::OleDbType::Currency, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"Freight", System::Data::DataRowVersion::Original, 
                false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipName", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipName", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipName", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipName", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipAddress", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipAddress", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipAddress", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipAddress", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipCity", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCity", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipCity", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCity", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipRegion", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipRegion", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipRegion", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipRegion", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipPostalCode", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipPostalCode", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipPostalCode", 
                System::Data::OleDb::OleDbType::VarWChar, 0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), 
                L"ShipPostalCode", System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipCountry", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCountry", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipCountry", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCountry", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->InsertCommand = (gcnew System::Data::OleDb::OleDbCommand());
        this->_adapter->InsertCommand->Connection = this->Connection;
        this->_adapter->InsertCommand->CommandText = L"INSERT INTO `Orders` (`CustomerID`, `EmployeeID`, `OrderDate`, `RequiredDate`, `S" 
L"hippedDate`, `ShipVia`, `Freight`, `ShipName`, `ShipAddress`, `ShipCity`, `ShipR" 
L"egion`, `ShipPostalCode`, `ShipCountry`) VALUES (\?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?" 
L", \?, \?)";
        this->_adapter->InsertCommand->CommandType = System::Data::CommandType::Text;
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"CustomerID", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"CustomerID", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"EmployeeID", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"EmployeeID", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"OrderDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"OrderDate", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"RequiredDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"RequiredDate", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShippedDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShippedDate", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipVia", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipVia", System::Data::DataRowVersion::Current, 
                false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Freight", System::Data::OleDb::OleDbType::Currency, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"Freight", System::Data::DataRowVersion::Current, 
                false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipName", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipName", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipAddress", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipAddress", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipCity", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCity", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipRegion", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipRegion", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipPostalCode", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipPostalCode", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipCountry", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCountry", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand = (gcnew System::Data::OleDb::OleDbCommand());
        this->_adapter->UpdateCommand->Connection = this->Connection;
        this->_adapter->UpdateCommand->CommandText = L"UPDATE `Orders` SET `CustomerID` = \?, `EmployeeID` = \?, `OrderDate` = \?, `Require" 
L"dDate` = \?, `ShippedDate` = \?, `ShipVia` = \?, `Freight` = \?, `ShipName` = \?, `Sh" 
L"ipAddress` = \?, `ShipCity` = \?, `ShipRegion` = \?, `ShipPostalCode` = \?, `ShipCou" 
L"ntry` = \? WHERE ((`OrderID` = \?) AND ((\? = 1 AND `CustomerID` IS NULL) OR (`Cust" 
L"omerID` = \?)) AND ((\? = 1 AND `EmployeeID` IS NULL) OR (`EmployeeID` = \?)) AND (" 
L"(\? = 1 AND `OrderDate` IS NULL) OR (`OrderDate` = \?)) AND ((\? = 1 AND `RequiredD" 
L"ate` IS NULL) OR (`RequiredDate` = \?)) AND ((\? = 1 AND `ShippedDate` IS NULL) OR" 
L" (`ShippedDate` = \?)) AND ((\? = 1 AND `ShipVia` IS NULL) OR (`ShipVia` = \?)) AND" 
L" ((\? = 1 AND `Freight` IS NULL) OR (`Freight` = \?)) AND ((\? = 1 AND `ShipName` I" 
L"S NULL) OR (`ShipName` = \?)) AND ((\? = 1 AND `ShipAddress` IS NULL) OR (`ShipAdd" 
L"ress` = \?)) AND ((\? = 1 AND `ShipCity` IS NULL) OR (`ShipCity` = \?)) AND ((\? = 1" 
L" AND `ShipRegion` IS NULL) OR (`ShipRegion` = \?)) AND ((\? = 1 AND `ShipPostalCod" 
L"e` IS NULL) OR (`ShipPostalCode` = \?)) AND ((\? = 1 AND `ShipCountry` IS NULL) OR" 
L" (`ShipCountry` = \?)))";
        this->_adapter->UpdateCommand->CommandType = System::Data::CommandType::Text;
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"CustomerID", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"CustomerID", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"EmployeeID", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"EmployeeID", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"OrderDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"OrderDate", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"RequiredDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"RequiredDate", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShippedDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShippedDate", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipVia", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipVia", System::Data::DataRowVersion::Current, 
                false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Freight", System::Data::OleDb::OleDbType::Currency, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"Freight", System::Data::DataRowVersion::Current, 
                false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipName", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipName", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipAddress", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipAddress", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipCity", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCity", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipRegion", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipRegion", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipPostalCode", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipPostalCode", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"ShipCountry", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCountry", 
                System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_OrderID", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"OrderID", System::Data::DataRowVersion::Original, 
                false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_CustomerID", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"CustomerID", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_CustomerID", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"CustomerID", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_EmployeeID", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"EmployeeID", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_EmployeeID", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"EmployeeID", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_OrderDate", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"OrderDate", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_OrderDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"OrderDate", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_RequiredDate", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"RequiredDate", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_RequiredDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"RequiredDate", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShippedDate", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShippedDate", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShippedDate", System::Data::OleDb::OleDbType::Date, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShippedDate", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipVia", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipVia", System::Data::DataRowVersion::Original, 
                true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipVia", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipVia", System::Data::DataRowVersion::Original, 
                false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_Freight", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"Freight", System::Data::DataRowVersion::Original, 
                true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_Freight", System::Data::OleDb::OleDbType::Currency, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"Freight", System::Data::DataRowVersion::Original, 
                false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipName", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipName", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipName", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipName", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipAddress", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipAddress", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipAddress", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipAddress", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipCity", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCity", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipCity", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCity", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipRegion", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipRegion", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipRegion", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipRegion", 
                System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipPostalCode", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipPostalCode", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipPostalCode", 
                System::Data::OleDb::OleDbType::VarWChar, 0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), 
                L"ShipPostalCode", System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"IsNull_ShipCountry", System::Data::OleDb::OleDbType::Integer, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCountry", 
                System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Original_ShipCountry", System::Data::OleDb::OleDbType::VarWChar, 
                0, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"ShipCountry", 
                System::Data::DataRowVersion::Original, false, nullptr)));
    }
    
    inline System::Void OrdersTableAdapter::InitConnection() {
        this->_connection = (gcnew System::Data::OleDb::OleDbConnection());
        this->_connection->ConnectionString = L"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=E:\\Programming\\AutoCompleteDemo\\Auto" 
L"CompleteDemo\\Debug\\Nwind.mdb;Persist Security Info=True";
    }
    
    inline System::Void OrdersTableAdapter::InitCommandCollection() {
        this->_commandCollection = gcnew cli::array< System::Data::OleDb::OleDbCommand^  >(2);
        this->_commandCollection[0] = (gcnew System::Data::OleDb::OleDbCommand());
        this->_commandCollection[0]->Connection = this->Connection;
        this->_commandCollection[0]->CommandText = L"SELECT        Orders.*\r\nFROM            Orders";
        this->_commandCollection[0]->CommandType = System::Data::CommandType::Text;
        this->_commandCollection[1] = (gcnew System::Data::OleDb::OleDbCommand());
        this->_commandCollection[1]->Connection = this->Connection;
        this->_commandCollection[1]->CommandText = L"SELECT        MIN(OrderID) AS OrderID, MIN(CustomerID) AS CustomerID, MIN(Employe" 
L"eID) AS EmployeeID, MIN(OrderDate) AS OrderDate, MIN(RequiredDate) \r\n           " 
L"              AS RequiredDate, MIN(ShippedDate) AS ShippedDate, MIN(ShipVia) AS " 
L"ShipVia, MIN(Freight) AS Freight, MIN(ShipName) AS ShipName, MIN(ShipAddress) \r\n" 
L"                         AS ShipAddress, MIN(ShipCity) AS ShipCity, MIN(ShipRegi" 
L"on) AS ShipRegion, MIN(ShipPostalCode) AS ShipPostalCode, MIN(ShipCountry) \r\n   " 
L"                      AS ShipCountry\r\nFROM            Orders\r\nGROUP BY ShipAddre" 
L"ss & \' \' & ShipCity & \' \' & ShipRegion & \' \' & ShipCountry & \' \' & ShipPostalCod" 
L"e\r\nHAVING        (UCASE(ShipAddress & \' \' & ShipCity & \' \' & ShipRegion & \' \' & " 
L"ShipCountry & \' \' & ShipPostalCode) LIKE UCASE(\?) & \'%\')";
        this->_commandCollection[1]->CommandType = System::Data::CommandType::Text;
        this->_commandCollection[1]->Parameters->Add((gcnew System::Data::OleDb::OleDbParameter(L"Param1", System::Data::OleDb::OleDbType::VarChar, 
                1024, System::Data::ParameterDirection::Input, static_cast<System::Byte>(0), static_cast<System::Byte>(0), L"", System::Data::DataRowVersion::Current, 
                false, nullptr)));
    }
    
    inline System::Int32 OrdersTableAdapter::Fill(AutoCompleteDemo::Northwind::OrdersDataTable^  dataTable) {
        this->Adapter->SelectCommand = this->CommandCollection[0];
        if (this->ClearBeforeFill == true) {
            dataTable->Clear();
        }
        System::Int32 returnValue = this->Adapter->Fill(dataTable);
        return returnValue;
    }
    
    inline AutoCompleteDemo::Northwind::OrdersDataTable^  OrdersTableAdapter::GetData() {
        this->Adapter->SelectCommand = this->CommandCollection[0];
        AutoCompleteDemo::Northwind::OrdersDataTable^  dataTable = (gcnew AutoCompleteDemo::Northwind::OrdersDataTable());
        this->Adapter->Fill(dataTable);
        return dataTable;
    }
    
    inline System::Int32 OrdersTableAdapter::FillByFilter(AutoCompleteDemo::Northwind::OrdersDataTable^  dataTable, System::String^  Param1) {
        this->Adapter->SelectCommand = this->CommandCollection[1];
        if (Param1 == nullptr) {
            throw (gcnew System::ArgumentNullException(L"Param1"));
        }
        else {
            this->Adapter->SelectCommand->Parameters[0]->Value = (cli::safe_cast<System::String^  >(Param1));
        }
        if (this->ClearBeforeFill == true) {
            dataTable->Clear();
        }
        System::Int32 returnValue = this->Adapter->Fill(dataTable);
        return returnValue;
    }
    
    inline AutoCompleteDemo::Northwind::OrdersDataTable^  OrdersTableAdapter::GetDataByFilter(System::String^  Param1) {
        this->Adapter->SelectCommand = this->CommandCollection[1];
        if (Param1 == nullptr) {
            throw (gcnew System::ArgumentNullException(L"Param1"));
        }
        else {
            this->Adapter->SelectCommand->Parameters[0]->Value = (cli::safe_cast<System::String^  >(Param1));
        }
        AutoCompleteDemo::Northwind::OrdersDataTable^  dataTable = (gcnew AutoCompleteDemo::Northwind::OrdersDataTable());
        this->Adapter->Fill(dataTable);
        return dataTable;
    }
    
    inline System::Int32 OrdersTableAdapter::Update(AutoCompleteDemo::Northwind::OrdersDataTable^  dataTable) {
        return this->Adapter->Update(dataTable);
    }
    
    inline System::Int32 OrdersTableAdapter::Update(AutoCompleteDemo::Northwind^  dataSet) {
        return this->Adapter->Update(dataSet, L"Orders");
    }
    
    inline System::Int32 OrdersTableAdapter::Update(System::Data::DataRow^  dataRow) {
        return this->Adapter->Update(gcnew cli::array< System::Data::DataRow^  >(1) {dataRow});
    }
    
    inline System::Int32 OrdersTableAdapter::Update(cli::array< System::Data::DataRow^  >^  dataRows) {
        return this->Adapter->Update(dataRows);
    }
    
    inline System::Int32 OrdersTableAdapter::Delete(
                System::Int32 Original_OrderID, 
                System::String^  Original_CustomerID, 
                System::Nullable<System::Int32 > Original_EmployeeID, 
                System::Nullable<System::DateTime > Original_OrderDate, 
                System::Nullable<System::DateTime > Original_RequiredDate, 
                System::Nullable<System::DateTime > Original_ShippedDate, 
                System::Nullable<System::Int32 > Original_ShipVia, 
                System::Nullable<System::Decimal > Original_Freight, 
                System::String^  Original_ShipName, 
                System::String^  Original_ShipAddress, 
                System::String^  Original_ShipCity, 
                System::String^  Original_ShipRegion, 
                System::String^  Original_ShipPostalCode, 
                System::String^  Original_ShipCountry) {
        this->Adapter->DeleteCommand->Parameters[0]->Value = static_cast<System::Int32>(Original_OrderID);
        if (Original_CustomerID == nullptr) {
            this->Adapter->DeleteCommand->Parameters[1]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[2]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[1]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[2]->Value = (cli::safe_cast<System::String^  >(Original_CustomerID));
        }
        if (Original_EmployeeID.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[3]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[4]->Value = static_cast<System::Int32>(Original_EmployeeID.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[3]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[4]->Value = System::DBNull::Value;
        }
        if (Original_OrderDate.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[5]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[6]->Value = static_cast<System::DateTime>(Original_OrderDate.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[5]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[6]->Value = System::DBNull::Value;
        }
        if (Original_RequiredDate.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[7]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[8]->Value = static_cast<System::DateTime>(Original_RequiredDate.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[7]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[8]->Value = System::DBNull::Value;
        }
        if (Original_ShippedDate.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[9]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[10]->Value = static_cast<System::DateTime>(Original_ShippedDate.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[9]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[10]->Value = System::DBNull::Value;
        }
        if (Original_ShipVia.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[11]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[12]->Value = static_cast<System::Int32>(Original_ShipVia.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[11]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[12]->Value = System::DBNull::Value;
        }
        if (Original_Freight.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[13]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[14]->Value = static_cast<System::Decimal>(Original_Freight.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[13]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[14]->Value = System::DBNull::Value;
        }
        if (Original_ShipName == nullptr) {
            this->Adapter->DeleteCommand->Parameters[15]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[16]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[15]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[16]->Value = (cli::safe_cast<System::String^  >(Original_ShipName));
        }
        if (Original_ShipAddress == nullptr) {
            this->Adapter->DeleteCommand->Parameters[17]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[18]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[17]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[18]->Value = (cli::safe_cast<System::String^  >(Original_ShipAddress));
        }
        if (Original_ShipCity == nullptr) {
            this->Adapter->DeleteCommand->Parameters[19]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[20]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[19]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[20]->Value = (cli::safe_cast<System::String^  >(Original_ShipCity));
        }
        if (Original_ShipRegion == nullptr) {
            this->Adapter->DeleteCommand->Parameters[21]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[22]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[21]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[22]->Value = (cli::safe_cast<System::String^  >(Original_ShipRegion));
        }
        if (Original_ShipPostalCode == nullptr) {
            this->Adapter->DeleteCommand->Parameters[23]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[24]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[23]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[24]->Value = (cli::safe_cast<System::String^  >(Original_ShipPostalCode));
        }
        if (Original_ShipCountry == nullptr) {
            this->Adapter->DeleteCommand->Parameters[25]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->DeleteCommand->Parameters[26]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[25]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->DeleteCommand->Parameters[26]->Value = (cli::safe_cast<System::String^  >(Original_ShipCountry));
        }
        System::Data::ConnectionState previousConnectionState = this->Adapter->DeleteCommand->Connection->State;
        if ((this->Adapter->DeleteCommand->Connection->State & System::Data::ConnectionState::Open) 
                    != System::Data::ConnectionState::Open) {
            this->Adapter->DeleteCommand->Connection->Open();
        }
        try {
            System::Int32 returnValue = this->Adapter->DeleteCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == System::Data::ConnectionState::Closed) {
                this->Adapter->DeleteCommand->Connection->Close();
            }
        }
    }
    
    inline System::Int32 OrdersTableAdapter::Insert(
                System::String^  CustomerID, 
                System::Nullable<System::Int32 > EmployeeID, 
                System::Nullable<System::DateTime > OrderDate, 
                System::Nullable<System::DateTime > RequiredDate, 
                System::Nullable<System::DateTime > ShippedDate, 
                System::Nullable<System::Int32 > ShipVia, 
                System::Nullable<System::Decimal > Freight, 
                System::String^  ShipName, 
                System::String^  ShipAddress, 
                System::String^  ShipCity, 
                System::String^  ShipRegion, 
                System::String^  ShipPostalCode, 
                System::String^  ShipCountry) {
        if (CustomerID == nullptr) {
            this->Adapter->InsertCommand->Parameters[0]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[0]->Value = (cli::safe_cast<System::String^  >(CustomerID));
        }
        if (EmployeeID.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[1]->Value = static_cast<System::Int32>(EmployeeID.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[1]->Value = System::DBNull::Value;
        }
        if (OrderDate.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[2]->Value = static_cast<System::DateTime>(OrderDate.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[2]->Value = System::DBNull::Value;
        }
        if (RequiredDate.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[3]->Value = static_cast<System::DateTime>(RequiredDate.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[3]->Value = System::DBNull::Value;
        }
        if (ShippedDate.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[4]->Value = static_cast<System::DateTime>(ShippedDate.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[4]->Value = System::DBNull::Value;
        }
        if (ShipVia.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[5]->Value = static_cast<System::Int32>(ShipVia.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[5]->Value = System::DBNull::Value;
        }
        if (Freight.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[6]->Value = static_cast<System::Decimal>(Freight.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[6]->Value = System::DBNull::Value;
        }
        if (ShipName == nullptr) {
            this->Adapter->InsertCommand->Parameters[7]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[7]->Value = (cli::safe_cast<System::String^  >(ShipName));
        }
        if (ShipAddress == nullptr) {
            this->Adapter->InsertCommand->Parameters[8]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[8]->Value = (cli::safe_cast<System::String^  >(ShipAddress));
        }
        if (ShipCity == nullptr) {
            this->Adapter->InsertCommand->Parameters[9]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[9]->Value = (cli::safe_cast<System::String^  >(ShipCity));
        }
        if (ShipRegion == nullptr) {
            this->Adapter->InsertCommand->Parameters[10]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[10]->Value = (cli::safe_cast<System::String^  >(ShipRegion));
        }
        if (ShipPostalCode == nullptr) {
            this->Adapter->InsertCommand->Parameters[11]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[11]->Value = (cli::safe_cast<System::String^  >(ShipPostalCode));
        }
        if (ShipCountry == nullptr) {
            this->Adapter->InsertCommand->Parameters[12]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[12]->Value = (cli::safe_cast<System::String^  >(ShipCountry));
        }
        System::Data::ConnectionState previousConnectionState = this->Adapter->InsertCommand->Connection->State;
        if ((this->Adapter->InsertCommand->Connection->State & System::Data::ConnectionState::Open) 
                    != System::Data::ConnectionState::Open) {
            this->Adapter->InsertCommand->Connection->Open();
        }
        try {
            System::Int32 returnValue = this->Adapter->InsertCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == System::Data::ConnectionState::Closed) {
                this->Adapter->InsertCommand->Connection->Close();
            }
        }
    }
    
    inline System::Int32 OrdersTableAdapter::Update(
                System::String^  CustomerID, 
                System::Nullable<System::Int32 > EmployeeID, 
                System::Nullable<System::DateTime > OrderDate, 
                System::Nullable<System::DateTime > RequiredDate, 
                System::Nullable<System::DateTime > ShippedDate, 
                System::Nullable<System::Int32 > ShipVia, 
                System::Nullable<System::Decimal > Freight, 
                System::String^  ShipName, 
                System::String^  ShipAddress, 
                System::String^  ShipCity, 
                System::String^  ShipRegion, 
                System::String^  ShipPostalCode, 
                System::String^  ShipCountry, 
                System::Int32 Original_OrderID, 
                System::String^  Original_CustomerID, 
                System::Nullable<System::Int32 > Original_EmployeeID, 
                System::Nullable<System::DateTime > Original_OrderDate, 
                System::Nullable<System::DateTime > Original_RequiredDate, 
                System::Nullable<System::DateTime > Original_ShippedDate, 
                System::Nullable<System::Int32 > Original_ShipVia, 
                System::Nullable<System::Decimal > Original_Freight, 
                System::String^  Original_ShipName, 
                System::String^  Original_ShipAddress, 
                System::String^  Original_ShipCity, 
                System::String^  Original_ShipRegion, 
                System::String^  Original_ShipPostalCode, 
                System::String^  Original_ShipCountry) {
        if (CustomerID == nullptr) {
            this->Adapter->UpdateCommand->Parameters[0]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[0]->Value = (cli::safe_cast<System::String^  >(CustomerID));
        }
        if (EmployeeID.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[1]->Value = static_cast<System::Int32>(EmployeeID.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[1]->Value = System::DBNull::Value;
        }
        if (OrderDate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[2]->Value = static_cast<System::DateTime>(OrderDate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[2]->Value = System::DBNull::Value;
        }
        if (RequiredDate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[3]->Value = static_cast<System::DateTime>(RequiredDate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[3]->Value = System::DBNull::Value;
        }
        if (ShippedDate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[4]->Value = static_cast<System::DateTime>(ShippedDate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[4]->Value = System::DBNull::Value;
        }
        if (ShipVia.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[5]->Value = static_cast<System::Int32>(ShipVia.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[5]->Value = System::DBNull::Value;
        }
        if (Freight.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[6]->Value = static_cast<System::Decimal>(Freight.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[6]->Value = System::DBNull::Value;
        }
        if (ShipName == nullptr) {
            this->Adapter->UpdateCommand->Parameters[7]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[7]->Value = (cli::safe_cast<System::String^  >(ShipName));
        }
        if (ShipAddress == nullptr) {
            this->Adapter->UpdateCommand->Parameters[8]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[8]->Value = (cli::safe_cast<System::String^  >(ShipAddress));
        }
        if (ShipCity == nullptr) {
            this->Adapter->UpdateCommand->Parameters[9]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[9]->Value = (cli::safe_cast<System::String^  >(ShipCity));
        }
        if (ShipRegion == nullptr) {
            this->Adapter->UpdateCommand->Parameters[10]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[10]->Value = (cli::safe_cast<System::String^  >(ShipRegion));
        }
        if (ShipPostalCode == nullptr) {
            this->Adapter->UpdateCommand->Parameters[11]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[11]->Value = (cli::safe_cast<System::String^  >(ShipPostalCode));
        }
        if (ShipCountry == nullptr) {
            this->Adapter->UpdateCommand->Parameters[12]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[12]->Value = (cli::safe_cast<System::String^  >(ShipCountry));
        }
        this->Adapter->UpdateCommand->Parameters[13]->Value = static_cast<System::Int32>(Original_OrderID);
        if (Original_CustomerID == nullptr) {
            this->Adapter->UpdateCommand->Parameters[14]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[15]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[14]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[15]->Value = (cli::safe_cast<System::String^  >(Original_CustomerID));
        }
        if (Original_EmployeeID.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[16]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[17]->Value = static_cast<System::Int32>(Original_EmployeeID.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[16]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[17]->Value = System::DBNull::Value;
        }
        if (Original_OrderDate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[18]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[19]->Value = static_cast<System::DateTime>(Original_OrderDate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[18]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[19]->Value = System::DBNull::Value;
        }
        if (Original_RequiredDate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[20]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[21]->Value = static_cast<System::DateTime>(Original_RequiredDate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[20]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[21]->Value = System::DBNull::Value;
        }
        if (Original_ShippedDate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[22]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[23]->Value = static_cast<System::DateTime>(Original_ShippedDate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[22]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[23]->Value = System::DBNull::Value;
        }
        if (Original_ShipVia.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[24]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[25]->Value = static_cast<System::Int32>(Original_ShipVia.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[24]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[25]->Value = System::DBNull::Value;
        }
        if (Original_Freight.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[26]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[27]->Value = static_cast<System::Decimal>(Original_Freight.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[26]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[27]->Value = System::DBNull::Value;
        }
        if (Original_ShipName == nullptr) {
            this->Adapter->UpdateCommand->Parameters[28]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[29]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[28]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[29]->Value = (cli::safe_cast<System::String^  >(Original_ShipName));
        }
        if (Original_ShipAddress == nullptr) {
            this->Adapter->UpdateCommand->Parameters[30]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[31]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[30]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[31]->Value = (cli::safe_cast<System::String^  >(Original_ShipAddress));
        }
        if (Original_ShipCity == nullptr) {
            this->Adapter->UpdateCommand->Parameters[32]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[33]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[32]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[33]->Value = (cli::safe_cast<System::String^  >(Original_ShipCity));
        }
        if (Original_ShipRegion == nullptr) {
            this->Adapter->UpdateCommand->Parameters[34]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[35]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[34]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[35]->Value = (cli::safe_cast<System::String^  >(Original_ShipRegion));
        }
        if (Original_ShipPostalCode == nullptr) {
            this->Adapter->UpdateCommand->Parameters[36]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[37]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[36]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[37]->Value = (cli::safe_cast<System::String^  >(Original_ShipPostalCode));
        }
        if (Original_ShipCountry == nullptr) {
            this->Adapter->UpdateCommand->Parameters[38]->Value = cli::safe_cast<System::Object^>(1);
            this->Adapter->UpdateCommand->Parameters[39]->Value = System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[38]->Value = cli::safe_cast<System::Object^>(0);
            this->Adapter->UpdateCommand->Parameters[39]->Value = (cli::safe_cast<System::String^  >(Original_ShipCountry));
        }
        System::Data::ConnectionState previousConnectionState = this->Adapter->UpdateCommand->Connection->State;
        if ((this->Adapter->UpdateCommand->Connection->State & System::Data::ConnectionState::Open) 
                    != System::Data::ConnectionState::Open) {
            this->Adapter->UpdateCommand->Connection->Open();
        }
        try {
            System::Int32 returnValue = this->Adapter->UpdateCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == System::Data::ConnectionState::Closed) {
                this->Adapter->UpdateCommand->Connection->Close();
            }
        }
    }
    }
}
